import unittest
from userstories import *
from individual_and_family import *

#this is code from main.py *************************************
#can be used by family and individual because both have id property
def find_by_id(object_list, id):
    for i in object_list:
        if i.id == id:
            return i
    return None
# End main.py code **************************************

#test cases
class Test(unittest.TestCase):

    def test_same_name_same_birth(self):
        #give the family an ID and children
        family = Family()
        family.ID = "F01"
        #create the children w/ id, name, birthday
        child_one = Individual()
        child_one.id = "@I1@"
        child_one.name = "Ryan Little"
        child_one.birthday = "5 APR 1997"
        child_two = Individual()
        child_two.id = "@I2@"
        child_two.name = "Ryan Little"
        child_two.birthday = "5 APR 1997"
        #give the fam kids
        family.children = ["@I1@", "@I2@"]
        #create vars for function
        families = [family]
        individuals = [child_one, child_two]
        story_checker = UserStoryChecker()
        story_checker.individuals = individuals
        story_checker.families = families
        #test
        duplicates = story_checker.unique_first_names()
        self.assertTrue(duplicates == [["@I1@", "@I2@"]])

    def test_same_name_diff_birth(self):
        #give the family an ID and children
        family = Family()
        family.ID = "F01"
        #create the children w/ id, name, birthday
        child_one = Individual()
        child_one.id = "@I1@"
        child_one.name = "Ryan Little"
        child_one.birthday = "5 APR 1997"
        child_two = Individual()
        child_two.id = "@I2@"
        child_two.name = "Ryan Little"
        child_two.birthday = "6 APR 1997"
        #give the fam kids
        family.children = ["@I1@", "@I2@"]
        #create vars for function
        families = [family]
        individuals = [child_one, child_two]
        story_checker = UserStoryChecker()
        story_checker.individuals = individuals
        story_checker.families = families
        #test
        duplicates = story_checker.unique_first_names()
        self.assertTrue(duplicates == [])

    def test_diff_name_same_birth(self):
        #give the family an ID and children
        family = Family()
        family.ID = "F01"
        #create the children w/ id, name, birthday
        child_one = Individual()
        child_one.id = "@I1@"
        child_one.name = "yan Little"
        child_one.birthday = "5 APR 1997"
        child_two = Individual()
        child_two.id = "@I2@"
        child_two.name = "Ryan Little"
        child_two.birthday = "5 APR 1997"
        #give the fam kids
        family.children = ["@I1@", "@I2@"]
        #create vars for function
        families = [family]
        individuals = [child_one, child_two]
        story_checker = UserStoryChecker()
        story_checker.individuals = individuals
        story_checker.families = families
        #test
        duplicates = story_checker.unique_first_names()
        self.assertTrue(duplicates == [])

    def test_diff_name_diff_birth(self):
        #give the family an ID and children
        family = Family()
        family.ID = "F01"
        #create the children w/ id, name, birthday
        child_one = Individual()
        child_one.id = "@I1@"
        child_one.name = "yan Little"
        child_one.birthday = "5 APR 1997"
        child_two = Individual()
        child_two.id = "@I2@"
        child_two.name = "Ryan Little"
        child_two.birthday = "6 APR 1997"
        #give the fam kids
        family.children = ["@I1@", "@I2@"]
        #create vars for function
        families = [family]
        individuals = [child_one, child_two]
        story_checker = UserStoryChecker()
        story_checker.individuals = individuals
        story_checker.families = families
        #test
        duplicates = story_checker.unique_first_names()
        self.assertTrue(duplicates == [])
    
    def test_three_same(self):
        #give the family an ID and children
        family = Family()
        family.ID = "F01"
        #create the children w/ id, name, birthday
        child_one = Individual()
        child_one.id = "@I1@"
        child_one.name = "Ryan Little"
        child_one.birthday = "5 APR 1997"
        child_two = Individual()
        child_two.id = "@I2@"
        child_two.name = "Ryan Little"
        child_two.birthday = "5 APR 1997"
        child_three = Individual()
        child_three.id = "@I3@"
        child_three.name = "Ryan Little"
        child_three.birthday = "5 APR 1997"
        #give the fam kids
        family.children = ["@I1@", "@I2@", "@I3@"]
        #create vars for function
        families = [family]
        individuals = [child_one, child_two, child_three]
        story_checker = UserStoryChecker()
        story_checker.individuals = individuals
        story_checker.families = families
        #test
        duplicates = story_checker.unique_first_names()
        self.assertTrue(duplicates == [["@I1@", "@I2@"],["@I1@", "@I3@"]])
    if __name__ == '__main__':
        unittest.main()
        
